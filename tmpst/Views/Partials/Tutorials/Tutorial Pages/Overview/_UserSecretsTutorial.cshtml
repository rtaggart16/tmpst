<div class="text-center">
    <h2>User Secrets</h2>
    <hr />
</div>

<div class="row text-center">
    <div class="col-12 tutorial-para">
        <button onclick="downloadPDF('Overview/User_Secrets.pdf')" class="btn btn-secondary"><span>View as a PDF <i class="fas fa-file-pdf fa-2x"></i></span></button>
        <button id="usr-scrt-full-screen-btn" class="btn btn-success" onclick="tutFullScreen('user-secret-tutorial')">Go Full Screen</button>
        <button style="display:none" id="usr-scrt-rmv-full-screen-btn" class="btn btn-danger" onclick="tutRemoveFullSCreen('user-secret-tutorial')">Exit Full Screen</button>
    </div>
    <hr />
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            As tmpst has to use some API keys to communicate with external data sources, these keys need to be kept secure from potential malicious users as a compromised 
            key may cause the data source to lock out our application, or in the case of the Google Maps API, cost us money by making excess calls.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Due to this, tmpst has used ASP.NET Core as the framework for its application. ASP.NET Core offers a user secret function which allows tmpst to store its 
            sensitive API information in a file called secrets.json.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            In this tutorial:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Pre-requisites:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    Visual Studio 2017 (Community, Professional or Enterprise)
                </li>
                <li>
                    .NET Core v2.2
                </li>
                <li>
                    Secrets to store (API Keys etc.)
                </li>
                <li>
                    ASP.NET Core Web Application
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            Aims:
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    Learn how to add user secrets to the secrets.json
                </li>
                <li>
                    Learn how to access the secret data securely in C# and store them in a model
                </li>
                <li>
                    Learn how to pass the secret data into a cshtml view
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            <strong>Step 1: Access secrets.json</strong>
        </span>
    </div>
</div>

<div class="row">
    <div class="col-6 tutorial-para">
        <p>
            Assuming your web application is already setup, right-click on the web application icon in the Visual Studio solution explorer as shown:
        </p>
    </div>
    <div class="col-6">
        <img src="~/images/Tutorials/Overview/User Secrets/Step 1 - Access Secrets.png" />
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            <strong>Step 2: Add applicable secrets to file</strong>
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            The image on the left shows the secrets.json as an empty file. The image on the right shows the secret file with a sample Google map secret declaration
        </p>
    </div>
</div>

<div class="row">
    <div class="col-6 tutorial-para">
        <img src="~/images/Tutorials/Overview/User Secrets/Step 2 pt 1 - Empty secrets.png" />
    </div>
    <div class="col-6 tutorial-para">
        <img src="~/images/Tutorials/Overview/User Secrets/Step 2 pt 2 - map secrets.png" />
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            In the example above, we have Google maps as an example. You can add any secret that you want. Below is a breakdown of the secrets configuration:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    “GoogleMapsKey” - Name of the secret declaration. This can be called anything that you want it to be.
                </li>
                <li>
                    “Api_Key” - Name of the attribute you want to store. This can also be called anything you want it to be.
                </li>
                <li>
                    “{YOUR_MAP_KEY}” - Value of the attribute that you want to be kept secure. This value does matter. In your example, 
                    replace {YOUR_MAP_KEY} with the value you wish to store. For security, we have not included our actual Google maps key
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            <strong>Step 3: Create Models to access secrets</strong>
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Now that you have added your secrets to the file, you will have to setup models to access the values. These models should have 
            the same names as the ones you have used in your secrets file so that you know what secrets map to what models. Below is an example 
            model setup using the existing Google map example:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            Steps:
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ol>
                <li>
                    Create a new class file called UserSecretModels in the Models folder of the application
                </li>
                <li>
                    Remove the class UserSecretModels from the file (Not necessary, but removes unneeded model)
                </li>
                <li>
                    Create a new class within the file with the same name as the secret declaration (in our example GoogleMapsKey)
                </li>
                <li>
                    Add the attribute(s) you added to the secrets to the new class (in our example Api_Key)
                </li>
            </ol>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-6 tutorial-para">
        <img src="~/images/Tutorials/Overview/User Secrets/Step 3 - Create Models to access secrets.png" />
    </div>
    <div class="col-6 tutorial-para">
        <span>The image to the left shows a GoogleMapsKey model which contains an attribute for our Google maps key.</span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            <strong>Step 4: Add middleware to access secrets</strong>
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Now that the secrets are in the json file and there are models to store the values, we need to add code to the startup class to ensure we can access these secrets at runtime:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            Steps:
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ol>
                <li>
                    Navigate to the ConfigureServices() method of the Startup.cs. The Startup class should be located near the bottom of the solution explorer in our case
                </li>
                <li>
                    Add the appropriate line of code to access the secrets (shown below)
                </li>
            </ol>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <img src="~/images/Tutorials/Overview/User Secrets/Step 4 - Add middleware to access secrets.png" />
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Above is the line we need to add to the method to ensure we can access our secrets. Below is a breakdown of the line’s content:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    GoogleMapsKey - The name of the model we have created to store a section of our secrets at runtime.
                </li>
                <li>
                    “GoogleMapsKey” - The name of the section in secrets.json that we want to store in the model.
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            At runtime the compiler will attempt to map the contents of the specified section of secrets.json to the stated model. In our case this will not be a problem as 
            we have given the model and the secret section the same names.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            <strong>Step 5 (Final Step): Use dependency injection to access secrets in controller</strong>
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Before continuing with this step, ensure that you have the following setup:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    Section of secrets - Make sure you have added a syntactically correct section to the secrets.json with an appropriate attribute(s) (See Step 2)
                </li>
                <li>
                    Class to contain secrets - Make sure that you have a class setup to map to your section of secrets (See Step 3)
                </li>
                <li>
                    Middleware to process secrets at runtime - Make sure that you have written the line of code that makes the compiler process your secrets (See Step 4)
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            If you have completed all of the above items, then you can proceed to actually access the value of your secrets by using dependency injection
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Note: For this section of the tutorial, we will be using the HomeController as our example controller. The following code will work on any class that inherits from 
            ControllerBase, however, as tmpst is a single page application (and that page is accessed from the HomeController) we will use this as our example.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            Steps:
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ol>
                <li>
                    Create a private readonly instance of the class which stores your secrets
                </li>
                <li>
                    Create a constructor of the Controller you are using
                </li>
                <li>
                    Add an IOptions<> instance of the model to the constructor of the controller (Name the parameter differently from the private instance created earlier)
                </li>
                <li>
                    Assign the value of the parameter to the private instance within the constructor
                </li>
            </ol>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Below is an image of what the final constructor should look like. Once again for this example we are using our Google maps secret:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-6 tutorial-para">
        <img src="~/images/Tutorials/Overview/User Secrets/Step 5 - Use dependency injection to access secrets in controller.png" />
    </div>
    <div class="col-6 tutorial-para">
        <span>
            The private instance of the user secret model can be called anything. However, once again it would be a good idea to give this a good name - especially if your dealing with multiple secret models
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            <strong>Conclusion</strong>
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            That's it. Your user secrets can now be accessed from the private instance of the secret model and you can do what you want with them. The model can be passed to methods and views alike. By making 
            this instance read only, we avoid any risk of mutating the contents of the class. You can access the attributes of the model b using the normal notation (_maps.). In our case the attribute we can access is Api_Key.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            Common Issues:
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Normally, user secrets can be setup without any mistakes However, some of the most common related to this tutorial are:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            Normally, user secrets can be setup without any mistakes However, some of the most common related to this tutorial are:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    Invalid secret syntax - This error occurs when a user has entered a secret in an incorrect format. The secrets.json file accepts json, therefore, using a 
                    <button class="btn btn-secondary" onclick="openTutorialLink('https://jsoneditoronline.org/')">JSON Editor</button> will help you format the data correctly
                </li>
                <li>
                    Don’t remove initial braces - In the secrets.json file there is a pair of { } brackets which should contain all secret data. It is common that people will 
                    remove these when adding in their secret data. If these have been removed then the secrets will not work as the file is no longer correct JSON. Make sure you
                    have an opening { and a closing } in your secrets.json
                </li>
                <li>
                    .Value is required - When using dependency injection to populate your private instance, you must ensure you store the .Value of the parameter in the private instance. 
                    If you do not the secrets can’t be accessed and you will receive an error
                </li>
                <li>
                    Forgetting steps - When setting up secrets it is common to forget a step in the process which will cause an error. If the tutorial does not work properly for you, 
                    then re-read the tutorial in case that is helpful
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span>
            <strong>Outcomes</strong>
        </span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            You should now be able to:
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    Add user secrets to the secrets.json
                </li>
                <li>
                    Access the secret data securely in C# and store them in a model
                </li>
                <li>
                    Pass the secret data into a cshtml view
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span><strong>References</strong></span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>Although we hope this tutorial has been all the help you need, here are some useful links that may be of use:</p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span><strong>Useful Resources</strong></span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    <span><button class="btn btn-secondary" onclick="openTutorialLink('https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-2.2&tabs=windows')">Microsoft Docs</button> - Microsoft's User Secret Documentation</span>
                </li>
                <li>
                    <span><button class="btn btn-secondary" onclick="openTutorialLink('https://dotnetcore.gaprogman.com/2017/09/07/user-secrets-what-are-they-and-why-do-i-need-them/')">Why use Secrets?</button> - Why secrets should be used and a short tutorial on how to implement them</span>
                </li>
            </ul>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <span><strong>Tools:</strong></span>
    </div>
</div>

<div class="row">
    <div class="col-12 tutorial-para">
        <p>
            <ul>
                <li>
                    <span><button class="btn btn-secondary" onclick="openTutorialLink('https://jsoneditoronline.org/')">JSON Editor</button> - Online JSON Editor with prettifier and error highlighting</span>
                </li>
            </ul>
        </p>
    </div>
</div>


